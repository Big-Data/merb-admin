<% params = request.params.except(:action, :controller, :model_name) %>
        <div id="content-main">
          <ul class="object-tools">
            <li>
              <%= link_to("Add #{@model_name.snake_case.gsub('_', ' ')}", slice_url(:admin_new, :model_name => @model_name.snake_case), :class => "addlink") %>
            </li>
          </ul>
          <div class="module filtered" id="changelist">
            <div id="toolbar">
              <form id="changelist-search" action="" method="get">
              <div>
                <label for="searchbar"><img src="<%= image_path("icon_searchbox.png") %>" alt="Search" /></label>
                <input type="text" size="40" name="query" value="" id="searchbar" />
                <input type="submit" value="Search" />
                <% if params[:query] || params[:filter] %>
                <span class="small quiet"><%= @record_count %> <%= @record_count == 1 ? "result" : "results" %> (<a href="?"><%= @model.count %> total</a>)</span>
                <% end %>
                <% if params[:filter] %>
                <% params[:filter].each do |name, value| %>
                <input type="hidden" name="filter[<%= name %>]" value="<%= value %>"/>
                <% end %>
                <% end %>
              </div>
              </form>
            </div>
            <script type="text/javascript">document.getElementById("searchbar").focus();</script>
            <div id="changelist-filter">
              <h2>Filter</h2>
              <% @properties.each do |property| %>
              <% if property.primitive.to_s == "TrueClass" %>
              <h3>By <%= property.field.gsub('_', ' ') %></h3>
              <ul>
                <li class="<%= params[:filter].nil? || params[:filter][property.name].blank? ? "selected" : nil %>">
                  <a href="?<%= Merb::Parse.params_to_query_string(params.merge(:filter => (params[:filter] || {}).reject{|key, value| key.to_sym == property.name})) %>">All</a>
                </li>
                <li class="<%= params[:filter] && params[:filter][property.name] == "true" ? "selected" : nil %>">
                  <a href="?<%= Merb::Parse.params_to_query_string(params.merge(:filter => (params[:filter] || {}).merge({property.name => "true"}))) %>">Yes</a>
                </li>
                <li class="<%= params[:filter] && params[:filter][property.name] == "false" ? "selected" : nil %>">
                  <a href="?<%= Merb::Parse.params_to_query_string(params.merge(:filter => (params[:filter] || {}).merge({property.name => "false"}))) %>">No</a>
                </li>
              </ul>
              <% elsif property.primitive.to_s == "Integer" && property.type.respond_to?(:flag_map) %>
              <h3>By <%= property.field.gsub('_', ' ') %></h3>
              <ul>
                <li class="<%= params[:filter].nil? || params[:filter][property.name].blank? ? "selected" : nil %>">
                  <a href="?<%= Merb::Parse.params_to_query_string(params.merge(:filter => (params[:filter] || {}).reject{|key, value| key.to_sym == property.name})) %>">All</a>
                </li>
                <% property.type.flag_map.each do |value, name| %>
                <li class="<%= params[:filter] && params[:filter][property.name] == name.to_s ? "selected" : nil %>">
                  <a href="?<%= Merb::Parse.params_to_query_string(params.merge(:filter => (params[:filter] || {}).merge({property.name => name}))) %>"><%= name.to_s.capitalize.gsub('_', ' ')%></a>
                </li>
                <% end %>
              </ul>
              <% end %>
              <% end %>
            </div>
            <table cellspacing="0">
              <thead>
                <tr>
                  <% @properties.each do |property| %>
                  <th class="<%= params[:sort] == property.field ? params[:sort_reverse] ? 'sorted descending' : 'sorted ascending' : nil %>">
                    <a href="?<%= Merb::Parse.params_to_query_string(params.merge(:sort => property.field).reject{|key, value| key.to_sym == :sort_reverse}.merge(params[:sort] == property.field && params[:sort_reverse] != "true" ? {:sort_reverse => "true"} : {})) %>"><%= property.field.capitalize.gsub('_', ' ') %></a>
                  </th>
                  <% end %>
                </tr>
              </thead>
              <tbody>
                <% @objects.each_with_index do |object, index| %>
                <tr class="row<%= index % 2 == 0 ? '1' : '2' %>">
                  <% @properties.each do |property| %>
                  <td>
                    <a href="<%= slice_url(:admin_edit, :model_name => @model_name.snake_case, :id => eval("object.id")) %>">
                      <% case property.primitive.to_s %>
                      <% when "TrueClass" %>
                      <% if eval("object.#{property.field}") == true %>
                      <img alt="True" src="<%= image_path("icon-yes.gif") %>"/>
                      <% else %>
                      <img alt="False" src="<%= image_path("icon-no.gif") %>"/>
                      <% end %>
                      <% when "DateTime" %>
                        <% value = eval("object.#{property.field}") %>
                      <%= value.respond_to?(:strftime) ? value.strftime("%b. %d, %Y, %I:%M%p") : nil %>
                      <% when "Date" %>
                        <% value = eval("object.#{property.field}") %>
                      <%= value.respond_to?(:strftime) ? value.strftime("%b. %d, %Y") : nil %>
                      <% when "Time" %>
                        <% value = eval("object.#{property.field}") %>
                      <%= value.respond_to?(:strftime) ? value.strftime("%I:%M%p") : nil %>
                      <% when "Integer" %>
                      <% if property.type.respond_to?(:flag_map) #Enum or Flag type %>
                      <%= eval("object.#{property.field}").to_s.capitalize.gsub('_', ' ') %>
                      <% else %>
                      <%= eval("object.#{property.field}") %>
                      <% end %>
                      <% when "BigDecimal" %>
                      <%= eval("object.#{property.field}") %>
                      <% when "Float" %>
                      <%= eval("object.#{property.field}") %>
                      <% when "String" %>
                      <%= eval("object.#{property.field}").to_s.truncate(50) %>
                      <% end %>
                    </a>
                  </td>
                  <% end %>
                </tr>
                <% end %>
              </tbody>
            </table>
            <p class="paginator">
              <% if @page_count.to_i > 1 %>
              <%= paginate(@current_page, @page_count, :url => '?' + Merb::Parse.params_to_query_string(params)) %>
              <% end %>
              <%= @record_count %> <%= @record_count == 1 ? @model_name.snake_case.gsub('_', ' ') : @model_name.snake_case.gsub('_', ' ').pluralize %>
              <% if @page_count.to_i == 2 %>
              <%= link_to("Show all", '?' + Merb::Parse.params_to_query_string(params.merge(:all => true)), :class => "showall") %>
              <% end %>
            </p>
          </div>
        </div>
        <br class="clear" />
